h1. Introduction

Ico is a JavaScript graph library that uses "Raphael":http://raphaeljs.com/ to render graphics as well as the "Prototype.js":http://prototypejs.org JavaScript framework. This means it can draw charts in multiple browsers, using VML in IE, and "SVG":http://www.w3.org/TR/SVG/ in all other browsers. Also because Raphael does not rely on Flash, it works well (and is tested) on iPhone.

The original version was written by "Alex Young":http://github.com/alexyoung. The current version features a new API, mainly due to componentization of all graph features, many bug fixes, new features, most importantly implements bullet graphs, angled labels, gradient backgrounds, proper negative bar graphs rendering.

To see a demo of the possibilities of the current version, check <a href="http://ser2.dialink.com:8080/">the current test suite</a> which is a rendering of index.html.

h2. Targeted graph types

* Sparklines, Sparbars, and Bullet Graphs
* Line graphs
* Bar graphs, Horizontal, Vertical

h2. Design considerations and goals

* Clarity: Use of white-space to help lend clarity to graphs, nominal scale vs. ordinal scale
* Simplicity: Minimal use of decorations and lines, reliance on the Gestalt principle of closure
* Conciseness: Avoidance of graph types that don't efficiently present data (pie charts, radar maps)

These goals are based on recommendations in Stephen Few's books:

* Show Me the Numbers: Designing Tables and Graphs to Enlighten
* Information Dashboard Design

Which was generally in turn based on Edward Tufte's work.

h1. Examples

Simple sparkline, no decoration:
<pre><code>new Ico.SparkLine(
  $( 'market_trend_id' ),                           // The id of the DOM element where the sparkline is rendered
  [5, 2, -1, 17, 23, 15, 7, 6, -5, -2, 4, 7, 3, 9]  // List of values for market trend
);</code></pre>

Bullet graph with 3 graph background colors and gradient transtitions:
<pre><code>new Ico.BulletGraph(
  $( 'gross_profit_id' ), // The id of the DOM element where the bullet graph will be rendered
  85,                     // Actual gross profit for current period as a percentage of gross revenues
  {                       // Bullet graph options
    min: 0,               // Minimum gross profit value
    max: 100,             // Maximum gross profit value
    target: 65,           // Forecasted gross profit value
    graph_background: {   // Defines graph background for gross profit
      key_values: [50, 75],               // Less than 50% is bad, more than 75% is good, in between is ok
      key_colors: ['#555','#999','#ddd'], // The 3 colors representing the 3 quality zones
      colors_transition: 10               // 10% Gradient transition between the different zones
    }
  }
);</code></pre>

Line graph with 2 lines, angled labels, $ units, meanline, mouse pointer, mouse-over value in status bar, and grid:
<pre><code>var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
new Ico.LineGraph( $( 'gross_profit_id' ),
  {                                                   // The 2 series
    actual: [31, 5, 1, -5, 15, 33, 20, 25, 1, 12, 25, -3],
    forecast: [18, -1, -7, 17, 15, 21, 1, 25, 3, 21, 16, 4]
  },
  {                                                   // Graph components' options
    colors: { actual:'#228899', forecast:'#339933' }, // Series' colors
    curve_amount: 10,                                 // Slightly curve series' lines path
    mouseover_attributes: { stroke: 'green' },        // When hovering over values
    font_size: 16,                                    // for both labels and value labels
    labels: { values: months, angle: 30 },            // Set labels at a 30 degres angle
    x_padding_right: 40,                              // Make more room on the right to properly display labels
    value_labels: {
      units: '$',                                     // Value labels units are $
      units_position: 0                               // Will be rendered before value labels
    },
    background: { color: '#ccf', corners: 5 },        // Set entire div background color and corner size 
    meanline: true,                                   // Display mean value of all series
    grid: true,                                       // Display a grid from labels and value labels
    mouse_pointer: true,                              // Display a cross mouse pointer in graph area
    status_bar : true,                                // Display status bar to show values on mouse over
  }
</code></pre>

See index.html for more examples.

h1. Documentation

h2. Graph classes

Graph classes provide defaults components appropriate for each type of graph:

<table>
  <tr>
    <td>Class name</td>
    <td>Base class</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>Ico.Base</td>
    <td>n/a</td>
    <td>Base class for all graphs, provides components architecture</td>
  </tr>
  <tr>
    <td>Ico.SparkLine</td>
    <td>Ico.Base</td>
    <td>Draw a single serie as a line. Expected to be rendered as an inline-block</td>
  </tr>
  <tr>
    <td>Ico.SparkBar</td>
    <td>Ico.SparkLine</td>
    <td>Draw a single serie of vertical bars. Expected to be rendered as an inline-block</td>
  </tr>
  <tr>
    <td>Ico.BulletGraph</td>
    <td>Ico.Base</td>
    <td>Draw a single value as a horizontal bar. Expected to be rendered as an inline-block</td>
  </tr>
  <tr>
    <td>Ico.BaseGraph</td>
    <td>Ico.Base</td>
    <td>Base class for line and bar graphs</td>
  </tr>
  <tr>
    <td>Ico.LineGraph</td>
    <td>Ico.BaseGraph</td>
    <td>Represent series as lines</td>
  </tr>
  <tr>
    <td>Ico.BarGraph</td>
    <td>Ico.BaseGraph</td>
    <td>Vertical Bars Graph</td>
  </tr>
  <tr>
    <td>Ico.HorizontalBarGraph</td>
    <td>Ico.BarGraph</td>
    <td>Horizontal Bars Graph</td>
  </tr>
</table>

To create and render a graph, call new <strong>Ico.desired_graph_type</strong>, providing three parameters:
* The DOM element where the graph will be rendered
* Data series
* Options

Example creating and rendering a line graph:
<pre><code>new Ico.LineGraph( dom_element, data_series, graph_options )</code></pre>

The DOM element is typically referenced by its id and fetched this way with the Prototype library:
<pre><code>dom_element = $( 'element_id' )</code></pre>

Data series can be:
* A single value (for a bullet graph only)
* An array of values for a single data serie
* A hash where:
** each key is the name of the serie
** value is an array containing the list of values

Example of hash with two data series:
<pre><code>data_series = {
  actual: [31, 5, 1, -5, 15, 33, 20, 25, 1, 12, 25, -3],
  forecast: [18, -1, -7, 17, 15, 21, 1, 25, 3, 21, 16, 4]
}</code></pre>

Options are provided as a hash of options where each key is the option name and each value is the option value. Options hashes can be nested typically to group options by components.

Many options are "Raphael attributes":http://raphaeljs.com/reference.html#attr which rely on the "SVG Specification":http://www.w3.org/TR/SVG/ so please refer to these documents when further information is needed.

Example of options:
<pre><code>graph_options = {                        // Graph components' options
  colors: { actual:'#228899', forecast:'#339933' }, // Series' colors
  curve_amount: 10,                                 // Slightly curve series' lines path
  mouseover_attributes: { stroke: 'green' },        // When hovering over values
  font_size: 16,                                    // for both labels and value labels
  labels: { values: months, angle: 30 },            // Set labels at a 30 degres angle
  x_padding_right: 40,                              // Make more room on the right to properly display labels
  value_labels: {
    units: '$',                                     // Value labels units are $
    units_position: 0                               // Will be rendered before value labels
  },
  background: { color: '#ccf', corners: 5 },        // Set entire div background color and corner size 
  meanline: true,                                   // Display mean value of all series
  grid: true,                                       // Display a grid from labels and value labels
  mouse_pointer: true,                              // Display a cross mouse pointer in graph area
  status_bar : true,                                // Display status bar to show values on mouse over
}</code></pre>

h3. Ico.Base options

The following are options shared by all graphs:

<table>
  <tr>
    <td>Option name</td>
    <td>Default value</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>width</td>
    <td>DOM element width</td>
    <td>Raphael Canvas width</td>
  </tr>
  <tr>
    <td>height</td>
    <td>DOM element height</td>
    <td>Raphael Canvas height</td>
  </tr>
  <tr>
    <td>color</td>
    <td>DOM element color</td>
    <td></td>
  </tr>
  <tr>
    <td>mouseover_attributes</td>
    <td>see bellow</td>
    <td>Mouseover attributes for data series</td>
  </tr>
  <tr>
    <td>mouseover_attributes.stroke</td>
    <td>red</td>
    <td>SVG stroke color</td>
  </tr>
  <tr>
    <td>orientation</td>
    <td>0</td>
    <td>0: horizontal, 1:vertical</td>
  </tr>
</table>

h3. Ico.SparkLine options

<table>
  <tr>
    <td>Option name</td>
    <td>Default value</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>highlight</td>
    <td>false</td>
    <td>true: highlight last value, hash: provide additional options</td>
  </tr>
  <tr>
    <td>highlight.index</td>
    <td>n/a</td>
    <td>index of the value to index in data serie</td>
  </tr>
</table>

h3. Ico.BulletGraph options

<table>
  <tr>
    <td>Option name</td>
    <td>Default value</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>min</td>
    <td>0</td>
    <td>Minimum (start) value</td>
  </tr>
  <tr>
    <td>max</td>
    <td>100</td>
    <td>Maximum (stop) value</td>
  </tr>
  <tr>
    <td>color</td>
    <td>'#33e' (blue)</td>
    <td>Color for value bar</td>
  </tr>
  <tr>
    <td>target_color</td>
    <td>'#666' (dark grey)</td>
    <td>Color for target vertical bar</td>
  </tr>
  <tr>
    <td>graph_background</td>
    <td>see Component.Graph defaults</td>
    <td>Include graph background component</td>
  </tr>
</table>

h2. Components

Graph features are driven by components. Each graph type defines different default components and graph orientation (horizontal or vertical). Default components can be disabled by explicitly setting their option to false.
Each component is shown witht the name of its options attribute hash:

<table>
  <tr>
    <td>Component Class</td>
    <td>Option Attribute Name</td>
    <td>Description</td>
  </tr>
  <tr>
    <td>Ico.Component</td>
    <td>n/a</td>
    <td>Base class of all graph components</td>
  </tr>
  <tr>
    <td>Ico.Component.Labels</td>
    <td>labels</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.ValueLabels</td>
    <td>value_labels</td>
    <td>Inherits from Labels</td>
  </tr>
  <tr>
    <td>Ico.Component.Graph</td>
    <td>graph_background</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.Background</td>
    <td>background</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.Axis</td>
    <td>axis</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.Meanline</td>
    <td>meanline</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.FocusHint</td>
    <td>focus_hint</td>
    <td></td>
  </tr> 
  <tr>
    <td>Ico.Component.MousePointer</td>
    <td>mouse_pointer</td>
    <td></td>
  </tr>
  <tr>
    <td>Ico.Component.StatusBar</td>
    <td>status_bar</td>
    <td></td>
  </tr>
</table>

h3. Component Options

<table>
  <tr>
    <td>Option name</td>
    <td>Default value</td>
    <td>Description</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

h2. Tested web browsers, known issues

* Firefox: best compromize of quality and speed, some rendering problems of angled fonts
* IE: best angled fonts rendering, slowest by far
* Safari: fastest, bugs: while zooming
* Google Chrome: good quality, bugs: while zooming
* iPhone (Safari): pretty amazing, try it
* Opera: good fonts rendering, bugs: zoom, mouse-over while scrolling

h2. ToDo / Wish list

* Add Legend component
* Add Title component
* Display values in tooltips instead of status bar, tooltips implemented w/ an external DOM library to enable out-of-the-canvas tooltips
* Improve Documentation
* Terminate options componentization
* Componentize series to allow bars and lines in the same graph
* Zoom-in spark lines, spark bars, and bullet graphs on-mouse-over.
* Display full graph of spark lines and spark bars on mouse-click, possibly in a tooltip
* Bar graphs: multiple series columns with 1/3 overlap
* Allow user events on graph elements
* Draw labels on top (or right if orientation) if all values are negative
* Remove prototype dependency, should also work w/ jQuery, Mootools sh/could probably become js library agnostic as most of the browser specific code is in Raphael itself

h3. API changes that might come

The API still needs to be finalized, expect non-backward compatible changes until version 1.0 is released.

Provide series-specific-attributes as keys from serie hash, series becomes an array of hash where each represents a serie if a hash is provided instead of an array then assume there is only one serie.

h2. Requirements

* "Raphael":http://raphaeljs.com
* "Prototype":http://prototypejs.org
